From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Fri, 31 Dec 2021 03:37:12 +0500
Subject: [PATCH] Add PacketMessageEvent


diff --git a/build.gradle.kts b/build.gradle.kts
index 0f3dd0b428536a8f2748285214d3890d266d046a..25df9c173eac7d4c9e9a478cc8cdb4f608b12c5c 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -42,6 +42,7 @@ dependencies {
     apiAndDocs("net.kyori:adventure-text-serializer-gson")
     apiAndDocs("net.kyori:adventure-text-serializer-legacy")
     apiAndDocs("net.kyori:adventure-text-serializer-plain")
+    apiAndDocs("net.kyori:adventure-text-serializer-bungeecord:4.0.1") // Sapphire
     api("org.apache.logging.log4j:log4j-api:2.17.1")
     api("org.slf4j:slf4j-api:1.8.0-beta4")
     api("com.mojang:authlib:2.3.31") // Sapphire
diff --git a/src/main/java/io/sapphiremc/sapphire/api/event/PacketMessageEvent.java b/src/main/java/io/sapphiremc/sapphire/api/event/PacketMessageEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..2af09ff8eec83724673d21dea03da48e865d4242
--- /dev/null
+++ b/src/main/java/io/sapphiremc/sapphire/api/event/PacketMessageEvent.java
@@ -0,0 +1,164 @@
+package io.sapphiremc.sapphire.api.event;
+
+import java.util.UUID;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.bukkit.Bukkit;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when the server sends a
+ * chat packet to the player.
+ */
+public class PacketMessageEvent extends Event implements Cancellable {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+    private final UUID target;
+    private final MessageType type;
+    private UUID sender;
+    private Component message;
+    private boolean isCancelled;
+
+    public PacketMessageEvent(boolean async, @NotNull UUID target, @NotNull Component message, @NotNull MessageType type) {
+        super(async);
+        this.target = target;
+        this.message = message;
+        this.type = type;
+        if (Bukkit.getServer().spigot().getSapphireConfig().getBoolean("general.debug", false)) {
+            org.bukkit.Bukkit.getLogger().info("[Sapphire] Calling PacketMessageEvent (sender = null, target = " + target + ", message = " + getMessage() + ", type = " + getMessageType().name() + ")");
+        }
+    }
+
+    public PacketMessageEvent(boolean async, @NotNull UUID sender, @NotNull UUID target, @NotNull Component message, @NotNull MessageType type) {
+        super(async);
+        this.sender = sender;
+        this.target = target;
+        this.message = message;
+        this.type = type;
+        if (Bukkit.getServer().spigot().getSapphireConfig().getBoolean("general.debug", false)) {
+            org.bukkit.Bukkit.getLogger().info("[Sapphire] Calling PacketMessageEvent (sender = " + sender + ", target = " + target + ", message = " + getMessage() + ", type = " + getMessageType().name() + ")");
+        }
+    }
+
+    /**
+     * Returns the uuid of the sender
+     *
+     * @return sender
+     */
+    @Nullable
+    public UUID getSender() {
+        return sender;
+    }
+
+    /**
+     * Returns the uuid of the target.
+     *
+     * @return target
+     */
+    @NotNull
+    public UUID getTarget() {
+        return target;
+    }
+
+    /**
+     * Returns a message in {@link Component} format.
+     *
+     * @return message component
+     */
+    @NotNull
+    public Component getMessageComponent() {
+        return message;
+    }
+
+    /**
+     * Returns a message in text format.
+     *
+     * @return message text
+     */
+    @NotNull
+    public String getMessage() {
+        return LegacyComponentSerializer.builder().extractUrls().hexColors().build().serialize(message);
+    }
+
+    /**
+     * Changes the message to a new {@link Component}
+     * message that will be sent to the target.
+     *
+     * @param message new message component
+     */
+    public void setMessageComponent(@NotNull Component message) {
+        this.message = message;
+    }
+
+    /**
+     * Changes the message to a new text message
+     * that will be sent to the target.
+     *
+     * @param message new message text
+     */
+    public void setMessage(@NotNull String message) {
+        this.message = LegacyComponentSerializer.builder().extractUrls().hexColors().build().deserialize(message);
+    }
+
+    /**
+     * Returns type of the message.
+     *
+     * @return message type
+     * @see MessageType
+     */
+    @NotNull
+    public MessageType getMessageType() {
+        return type;
+    }
+
+    /**
+     * Returns true if the event was canceled, otherwise false.
+     *
+     * @return cancel status
+     */
+    @Override
+    public boolean isCancelled() {
+        return isCancelled;
+    }
+
+    /**
+     * Changes the status of the event.
+     * If set to true, then it will be canceled.
+     *
+     * @param cancelled cancel status
+     */
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.isCancelled = cancelled;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    public enum MessageType {
+        /**
+         * Chat message type.
+         */
+        CHAT,
+        /**
+         * System message type.
+         */
+        SYSTEM,
+        /**
+         * Game info message type.
+         */
+        GAME_INFO
+    }
+}
